/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | "/Q  |  W  |  H  |  P  | PG_UP/G   |        |  UP/J   |  L   |  U    |  Y  |  ;  |
// | @/A  |  S  |  R  | '/T | RIGHT/D   |        | LEFT/F  |Cmd/N |Ctrl/E |Alt/I|  O  |
// |Z/SHFT|  X  |  C  |  V  | PG_DOWN/B |        | DOWN/K  |  M   |  ,    |  .  |/ SHFT|
//            |LYR 1|RET/TAB|DEL/COMMAND|         | BKSP    | SPC  |_/- |
                        bindings = <
   &mt DQT Q &kp W &kp H &kp P &mt PG_UP G          &mt UP J &kp L  &kp U &kp Y &kp SEMI
   &mt AT A &kp S &kp R &mt SQT T &mt RIGHT D       &mt LEFT F &mt RGUI N  &mt LCTRL E &mt LALT I &kp O
   &mt LSHFT Z &kp X &kp C &kp V &mt PG_DN B        &mt DOWN K &kp M  &kp COMMA &kp DOT &mt LSHFT FSLH
            &mo 1 &mt TAB RET &mt RCMD DEL          &kp BKSP &kp SPACE &mt UNDER MINUS
                        >;
                };
                nav_layer {
// -----------------------------------------------------------------------------------------
// | ""  | || |  #  |  ()  |     |          | ESC |  l   |  2   |  3  |  4   |
// |  @  | [] |  *  |  ~   |     |          | +/- |  5   |  6   |  7  |  8   |
// |     |    | {}  |  <>  |  ^  |          | * / |  9   |  0   | DOT | EQUAL|
//            |     |      |     |          |     |      |LYR 2 |
                        bindings = <
   &kp DQT &kp PIPE       &kp HASH       &mt RPAR LPAR  &trans          &kp ESC  &kp N1 &kp N2   &kp N3   &kp N4
   &kp AT  &mt RBKT LBKT  &kp ASTRK      &kp TILDE      &trans          &kp PLUS &k N5 &kp N6 &kp N7 &kp N8
   &trans  &trans         &mt RBRC LBRC  &mt GT LT      &kp CARET       &kp BSLH &kp N9  &kp N0   &trans    &kp EQUAL
           &trans         &trans         &trans                         &trans   &trans &mo 2   
                        >;
                };

                sym_layer {
// -----------------------------------------------------------------------------------------
// |BTCLR| BT1 | BT2 | BT3 | BT4 |          |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |          |  -  |  =  |  {  |  }  | "|" |
// |     |     |     |RESET| BOOT|          |  _  |  +  |  [  |  ]  |  \  |
//             | GUI |     | SPC |          | ENT |     | ALT |
                        bindings = <
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &trans   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR
   &trans    &trans    &trans    &trans    &trans             &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp PIPE
   &trans    &trans    &trans    &sys_reset &bootloader       &trans    &trans    &trans          &trans   &kp BSLH
                       &kp LGUI  &trans    &kp SPACE          &kp RET   &trans    &kp RALT
                        >;
                };

// This layer is unreachable until "tri layer state" is sorted out.
// Leaving it here for completeness.
                num_layer {
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |   |  A  |  7  |  8  |  9  |  D  |
// |     |     |     |     |     |   |  B  |  4  |  5  |  6  |  E  |
// |     |     |     |     |     |   |  C  |  1  |  2  |  3  |  F  |
//             |     |     |     |   |  0  |  .  |     |
                        bindings = <
   &trans &trans &trans &trans &trans    &kp A  &kp N7  &kp N8 &kp N9 &kp D
   &trans &trans &trans &trans &trans    &kp B  &kp N4  &kp N5 &kp N6 &kp E
   &trans &trans &trans &trans &trans    &kp C  &kp N1  &kp N2 &kp N3 &kp F
                 &trans &trans &trans    &kp N0 &kp DOT &trans
                        >;
                };
        };
};
